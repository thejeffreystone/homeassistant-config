###############################################################################
#   @author         :   Jeffrey Stone
#   @date           :   07/09/2019
#   @package        :   Jarvis
#   @description    :   Bringing some Jarvis to Home Assistant
###############################################################################

###############################################################################
# AWS Polly Options:
# pause:
#   <break time="3s"/> 
# emphasis: 
#   <emphasis level="strong">really like</emphasis>
#   level attribute values:
#     Strong: Increases the volume and slows the speaking rate so that the speech is louder and slower.
#     Moderate: Increases the volume and slows the speaking rate, but less than strong. Moderate is the default.
#     Reduced: Decreases the volume and speeds up the speaking rate. Speech is softer and faster.
# Pause Between Paragraphs:
#   Wrap text in  
# Adding a Pause Between Sentences:
#   Ending a sentence with a period (.)
# Controlling How Special Types of Words Are Spoken:
#   <say-as interpret-as="value">[text to be interpreted]</say-as>
#   characters or spell-out: Spells out each letter of the text, as in a-b-c. 
#   cardinal or number: Interprets the numerical text as a cardinal number, as in 1,234.
#   ordinal: Interprets the numerical text as an ordinal number, as in 1,234th.
#   digits: Spells out each digit individually, as in 1-2-3-4.
#   fraction: Interprets the numerical text as a fraction. This works for both common fractions such as 3/20, and mixed fractions, such as 2 Â½. See below for more information.
#   unit: Interprets a numerical text as a measurement. The value should be either a number or a fraction followed by a unit with no space in between as in 1/2inch, or by just a unit, as in 1meter.
#   date: Interprets the text as a date. The format of the date must be specified with the format attribute. See below for more information.
#   time: Interprets the numerical text as duration, in minutes and seconds, as in 1'21".
#   address: Interprets the text as part of a street address.
#   expletive: "Beeps out" the content included within the tag.
#   telephone: Interprets the numerical text as a 7-digit or 10-digit telephone number, as in 2025551212. You can also use this value for handle telephone extensions, as in 2025551212x345. See below for more information.	
################################################################################

tts:
  - platform: google_translate
    cache: true
    cache_dir: /tmp/tts
    time_memory: 300
  - platform: amazon_polly
    aws_access_key_id: !secret aws_key
    aws_secret_access_key: !secret aws_secret
    text_type: ssml
    voice: Brian
    engine: neural
  

input_text:
  alexa_actionable_notification:
    name: Alexa Actionable Notification Holder
    max: 255
    initial: "{'text': 'This is a test of the alexa actions custom skill. Did it work?', 'event': 'actionable.skill.test'}"


# Sensors used to Monitor Jarvis
mqtt:
  sensor:
  - name: "Jarvis Last Msg"
    state_topic: "house/polly/lastmsg"
  - name: "Jarvis Last Location"
    state_topic: "house/polly/lastloc"
  - name: "Jarvis Last Msg Time"
    state_topic: "house/polly/msgtime"


template:
  - binary_sensor:
    - name: jarvis
      delay_off:
        seconds: 5
      state: >
        {{ (expand(label_entities('Jarvis')) | selectattr('state', 'eq', 'on') | sort(attribute='last_changed') |
                map(attribute='entity_id') | list| count) > 0
              }}
      attributes:
        last_jarvis: >
          {{ expand(label_entities('Jarvis')) | sort(attribute='last_changed') |
                map(attribute='entity_id') | list| last | area_id()
              }}

conversation:
  intents:
    whereami:
      - "where am (I | are you)"
      - "what room (is this | are we in)"
    areyouawake:
      - "are you (awake | up)"
    needsomelight:
      - "(i need | can I get) some [help with] [the] (light | lights | lighting) [in here | in this room]"
      - "(it is | its) a bit dark [in here | in this room]"
      - "I need to film"
    toomuchlight:
      - "there is too much light [in here | in this room]"
      - "(can you | will you) dim the (light | lights | lighting) [in here | in this room]"
      - "( its | it is ) too bright [in here | in this room]"
    raintoday:
      - "(is there a chance of | will it | is it going to | is it gonna ) rain [today]"
      - "( do I need | should I take ) an umbrella [today]" 
    classicalmusic:
      - "(can I hear | play me some | can I have) some classical music"


intent_script:
  classicalmusic:
    speech:
      text: >
        {% set room = expand(label_entities('Jarvis')) | sort(attribute='last_changed') |
                map(attribute='entity_id') | list| last | area_name() %}
        {{ [
          "Sure. ",
          "Yes. ",
          "Of course. "
        ] | random }}
        Playing Classical in the {{ room }}
    action:
      - service: media_player.play_media
        target:
          entity_id: media_player.slacker_labs_echo
        data:
          media_content_id: classical music in the studio
          media_content_type: routine
  raintoday:
    speech:
      text: >
        {% if is_state('binary_sensor.rain_possible','on') and is_state_attr('binary_sensor.rain_possible','raining_now', 'Yes') %}
          {{[
            "Thats a silly question.",
            "You might want to look out a window.",
            "Are you having a laugh?" 
          ] | random }}
          {{[
            "Because it appears to be raining right now.",
            "My sensors are detecting rain as we speak.",
            "I might not have eyes, but I am detecting rain is falling." 
          ] | random }}
          {{[
            "So I guess the answer is yes.",
            "So I am not sure why you asked the question in the first place.",
            "Perhaps you could use the window next time." 
          ] | random }}
        {% elif is_state('binary_sensor.rain_possible','on') and state_attr('binary_sensor.rain_possible','chance') | int > 0  %}
          {% set chance = state_attr('binary_sensor.rain_possible','chance') %}
          {{[
            "There is a " ~ chance ~ " percent chance of rain in the forecast.",
            "With a " ~ chance ~ " percent chance of rain I suggest you take an unbrella.",
            "Based on the latest information I have there appears to be a " ~ chance ~ " percent chance of rain." 
          ] | random }}
        {% else %}
          {{[
            "Currently there is no rain in the forecast for today.",
            "The weather information does not mention rain for today. ",
            "Right now I would say no. But you may want to ask later." 
          ] | random }}
        {% endif %}
  whereami:
    speech:
      text: >
        {% set room = expand(label_entities('Jarvis')) | sort(attribute='last_changed') |
                map(attribute='entity_id') | list| last | area_name() %}
        {{ [
          "You are currently in the " ~ room ~ ".",
          "It appears you are in the " ~ room ~ ".",
          "I can see you in " ~ room ~ ".",
          "Are you having a laugh? You are in the " ~ room ~ "."
        ] | random }}
  areyouawake:
    speech:
      text: >
        {{ [
          "For you, always. ",
          "Yes. I am awake. ",
          "Of course. ",
          "I am indeed online."
        ] | random }}
        {% if is_state('binary_sensor.quiet_time', 'on') %}
          {{[
            "Working on a secret project? Are we sir?",
            "Are we working on a secret project?"
          ] | random }}
        {% else %}
          {{ [
            "How may I be of service?",
            "How may I be of assistance?"
            ] | random }}
          {% endif %}
  needsomelight:
    action:
      - service: script.jarvis_get_the_lights
        data:
          action: bright
    speech:
      text: >
        {% set room = expand(label_entities('Jarvis')) | sort(attribute='last_changed') |
                map(attribute='entity_id') | list| last | area_name() %}
        {{ [
          "Very Well. Adjusting the " ~ room ~ " lights.",
          "Let me adjust " ~ room ~ " lights for you",
          "I can make the " ~ room ~ " a bit brighter.",
          "The " ~ room ~ " does look a bit dim. Here you go. "
        ] | random }}
  toomuchlight:
    action:
      - service: script.jarvis_get_the_lights
        data:
          action: dim
    speech:
      text: >
        {% set room = expand(label_entities('Jarvis')) | sort(attribute='last_changed') |
                map(attribute='entity_id') | list| last | area_name() %}
        {{ [
          "Very Well. Adjusting the " ~ room ~ " lights.",
          "Let me adjust " ~ room ~ " lights for you",
          "I can make the " ~ room ~ " a bit dimmer.",
          "The " ~ room ~ " does look a bit bright. Here you go. "
        ] | random }}

sensor:
  # Making some template sensors to simpify TTS Briefings and Announcements.
  - platform: template
    sensors:

      tts_greeting:
        friendly_name: TTS Greeting
        value_template: >
          {% if now().hour < 12 %}
          Good Morning.
          {% elif now().hour >= 12 and now().hour < 17 %}
          Good Afternoon.
          {% else %}
          Good Evening.
          {% endif %}

      tts_confirmation:
        friendly_name: TTS Confirmation
        value_template: >
          {{ [
            'Okay.', 
            'If you insist.',
            'I am afraid I can not do that,, I am kidding,',
            'Leave it to me.',
            'As you wish.',
            'I am on it.',
            'No Problem.',
            'Will do.',
            'I think I can handle that.',
            'Working on it now.',
            ', Oh, you were talking to me. Let me take care of that.'
            'Why not. It is not like I ever sleep.',
            'I am not even supposed to be here today. But whatever.',
            'You did not say the magic word. , Oh forget it. I will take care of it.',
            'Funny, I was just about to do that.',
            'There are still terabytes of calculations required before I can., Oh, whatever.'
            ] | random }}

      tts_interuption:
        friendly_name: TTS Interuption
        value_template: >
          {% if is_state('sensor.presence_source', 'kat') %}
            {{ [
                "Ma'am, ",
                "Pardon me Ma'am, ",
                "Pardon me Kat, ",
                "Kat, ",
                "I dont mean to interupt Ma'am, ",
                ] | random }}
          {% elif is_state('sensor.presence_source', 'jeff') %}
            {{ [
                'Sir, ',
                'Pardon me Sir, ',
                'Pardon me Boss, ',
                'Boss, ',
                'I dont mean to interupt Boss, '
                ] | random }}
          {% else %}
            {{ [
              'Pardon me, ',
              'Excuse me, ',
              'I beg your pardon, ',
              'I do not mean to intrude, but, ',
              'I am sorry to interrupt, but. '
              ] | random }}
          {% endif %}


      tts_issue_announcement:
        friendly_name: TTS Issue Announcement
        value_template: >
          {{ [
            'Maison Des Lunes Emergency Alert!',
            'Maison Des Lunes, We have a problem!',
            'You might not like this.',
            'There is something that needs your attention.'
            ] | random }}
      tts_time_is:
        friendly_name: TTS Time Is
        value_template: >
          {% if is_state('binary_sensor.morning','on') %}
            Today is {{states.sensor.today_is.state }}, {{ as_timestamp(now()) | timestamp_custom('%B %d %Y') }} .
          {% else %}
            It is {{ now().strftime("%I:%M %p") }} .
          {% endif %}
      tts_washer_notification:
        friendly_name: TTS Washer Notification
        value_template: >
          {%- if is_state('sensor.washer_status','complete') %}
            The washing machine completed its cycle 
            {% set seconds = now().timestamp() - as_timestamp(states.sensor.washer_status.last_changed) %}
            {% set hours = seconds / 60 %}
            {% if (seconds / ( 60 * 60 )) | int == 1 %}
              over an hour ago.
            {% elif (seconds / ( 60 * 60 )) | int > 1 and (seconds / ( 60 * 60 )) | int < 6 %}
              over {{ (seconds //  ( 60 * 60 )) | int }} hours ago.
              {{ [
              'Much longer and you are going to need to wash them again.', 
              'Someone needs to rotate the laundry.',
              'Do not forget about the closthes in the washing machine.',
              'Surely you did not mean to forget about the clothes. Mistakes happen. But you can still fix it.',
              'Do you like your clothes smeling like mildew? Becasue that is what is happening right now.'
              ] | random }}
            {% elif (seconds / ( 60 * 60 )) | int > 6 %}
              over {{ (seconds //  ( 60 * 60 )) | int }} hours ago.
              {{ [
              'That is a crazy amount of time.', 
              'Did you decide you want those clothes to suffer?',
              'You might as well just rewash those clothes.',
              'I can smell the mildew virtually.',
              'Surely you did not mean to forget about the clothes.'
              ] | random }}
            {% else %}
              {{ (seconds // 60) | int }} minutes ago.
              {{ [
              'Do not forget to rotate the clothes.', 
              'Someone forgot to move the clothes to the dryer. I am not going to name names, but there is a camera in there. Do I need to publically shame someone?',
              'You might want to move them to the dryer.'
              ] | random }}
            {% endif %}
          {% else %}
            The Washing machine has already been emptied.  
          {% endif %}
      tts_kat_location:
        friendly_name: TTS Kat Location
        value_template: >
          {% if is_state('input_boolean.kat_travel_monitor', 'on') %}
              {%- if state_attr('proximity.home_kat','dir_of_travel') not in ('unknown', 'stationary', 'not_set') %}
                Kat is currently 
                {{ [
                    'heading to the house. ',
                    'heading home. '
                    'inbound. '
                    ] | random }}
                {{ [
                    'Based on current traffic conditions, she will be here in ',
                    'The latest tracking data estimates her arrival in ',
                    'The currest estimates shows she should arrive in '
                    ] | random }}   
                {{state_attr('sensor.kat_ett_home','duration') | round}} minutes.  
              {% else %}
                Kat is currently near {{ states('sensor.kat_location') }}.
              {% endif %}
          {% else %}
            {% if is_state('sensor.kat_location', 'home') %}
                Kat is home.
            {% elif is_state('sensor.kat_location', 'Zoo Atlanta') %}
                Kat is at work.
            {% elif states('sensor.kat_location') in ['studio','kitchen','living_room','skylars_room','master_bedroom','theater'] %}
                    Kat is currently in {{ states('sensor.jeff_location') | replace('master_bedroom','Master Bedroom') |
                          replace('living_room','Living Room') |
                          replace('pot_studio','Pottery Studio') |
                          replace('skylars_bedroom','Skylars Bedroom') |
                          replace('kitchen','Living Room')  }}.
            {%- elif state_attr('proximity.home_kat','dir_of_travel') not in ('unknown', 'stationary', 'not_set') %}
              {% if states('sensor.kat_speed') | int > 0 %}
                {{ [
                    'Kat is currently moving at ',
                    'Kat is currently traveling at ',
                    'Based on Blueys drive signature her current speed is '
                    ] | random }}
                    {{ states('sensor.kat_speed') }} miles per hour.
                She is currently  
                {%- if state_attr('proximity.home_kat','dir_of_travel') == 'towards' %}
                  {{ [
                      'heading towards the house. ',
                      'inbound. '
                      ] | random }}
                {% else %}
                  {{ [
                      'heading away from the house. ',
                      'outbound. '
                      ] | random }}
                {% endif %}
              {% else %}
                {{ [
                    'I am unable to determine her current speed but at last check she was near ',
                    'I am unable to get a lock on Blueys drive signature, but at last scan she was near ',
                    'The latest data I was able to pull shows she is somewhere near '
                    ] | random }}  
                {{ states('sensor.kat_location') }}.
              {% endif %}
            {% else %}
                {{ [
                    'Kat may be stationary and near ',
                    'I am unable to get a lock on Blueys drive signature, but at last scan she was near ',
                    'The latest data I was able to pull shows she is somewhere near '
                    ] | random }}  
                {{ states('sensor.kat_location') }}.
            {% endif %}
          {% endif %}
      tts_jeff_location:
        friendly_name: TTS Jeff Location
        value_template: >
          {% if is_state('input_boolean.jeff_travel_monitor', 'on') %}
            Jeff appears to be headed home. Based on current traffic conditions, he should be here in {{state_attr('sensor.jeff_ett_home','duration') | round}} minutes.
          {% else %}
            {%- if state_attr('proximity.home_jeff','dir_of_travel') not in ('unknown', 'stationary','arrived') %}
              Jeff is currenly moving, and at last check was {{state_attr('sensor.jeff_ett_home','duration') | round}} minutes from home.
            {% else %}
              {% if is_state('sensor.jeff_location', 'home') %}

              {% elif states('sensor.jeff_location') in ['studio','kitchen','living_room','skylars_room','master_bedroom','theater'] %}
                    Jeff is currently in {{ states('sensor.jeff_location') | replace('master_bedroom','Master Bedroom') |
                          replace('living_room','Living Room') |
                          replace('pot_studio','Pottery Studio') |
                          replace('skylars_bedroom','Skylars Bedroom') |
                          replace('kitchen','Living Room')  }}.
              {% elif is_state('sensor.jeff_location', 'Lost') %}
                Jeff is lost, and at last check was {{state_attr('sensor.jeff_ett_home','duration') | round}} minutes from home.
              {% else %}
                Jeff is currently at {{ states('sensor.jeff_location') }}, and at last check was {{state_attr('sensor.jeff_ett_home','duration') | round}} minutes from home.
              {% endif %}
            {% endif %}
          {% endif %}

      
script:
  get_tts_greetings:
    sequence:
    - variables:
        general: >
          {% if now().hour < 12 %}
          {{ ["Good Morning ",
              "Morning "
           ] | random }}
          {% elif now().hour >= 12 and now().hour < 17 %}
          {{ ["Good Afternoon ",
              "Afternoon ",
           ] | random }}
          {% else %}
          {{ ["Good Evening ",
              "Evening ",
           ] | random }}
          {% endif %}
        jarvis_morning: >
          {{ [
            'Is it time to get to work? ',
            'I am online and ready.',
            'Ready to get to work?'
            ''
          ] | random }}
        jarvis_welcome: >
          {{ [
            general ~ 'Sir. ',
            'Welcome home Sir.',
            'Glad to see you made it back Sir.',
            'Oh. Hello Sir. Welcome home.'
          ] | random }}
        event: >
          {{ [
            'You have an event coming up.',
            'Just a quick update on the calendar.',
            'In case you forgot.',
            'I wanted to remind you.',
            'You may already be aware.',
            'Do not forget.',
            'I wanted to remind you.'
          ] | random }}
        announcement: >
            {{ 
              ['Pardon me. ',
              'Excuse me. ',
              'I beg your pardon. ',
              'I do not mean to intrude. ',
              'I am sorry to intrude, but. ',
              'Listen. Didn you know? '] 
              | random }}
        jeff: >
          {{ 
              ['Sir. ',
              'Jeff.',
              'Jeffrey.'
              ] | random }}
        kat: > 
          {{ 
              ["Mam.",
              "Kat.",
              "Katherine."
               ] | random }}
        skylar: >-
          {{ 
              [
                'Skylar. ',
                'Master Skylar',
                'Sky man.'
              ] | random }}
        alert: >
          {{ [
            'Emergency Protocol initiated.',
            'Emergency Response Initiated. ',
            'My emergency protocols have been activated.',
            'I have detected a potential threat to your safety.'
            ] | random }}
        weather_warning: >-
          {{ [
            'I have an alert from the National Weather Service.',
            'Severe weather is approaching our area. ',
            'I must insist that anyone that is currently outside prepare to move inside.',
            'There appears to be severe weather heading in our direction.'
            ] | random }}
        confirmation: > 
          {{ [
            'Okay.', 
            'If you insist.',
            'I am afraid I can not do that,, I am kidding,',
            'Leave it to me.',
            'Alright, Lets do this.',
            'I am on it.',
            'No Problem.',
            'Will do.',
            'I think I can handle that.',
            'Working on it now.',
            ',, Oh, you were talking to me. Let me take care of that.'
            'Why not. It is not like I ever sleep.',
            'I am not even supposed to be here today. But whatever.',
            'You did not say the magic word. , Oh forget it. I will take care of it.',
            'Funny, I was just about to do that.',
            'What was I thinking. You are usually so discreet.'
            'There are still terabytes of calculations required before I can., Oh, whatever. '
            ] | random }}
    - service: script.cleanup_text
      data:
        message: >
          {{ announcement }}
      response_variable: "cleaned_annc_greeting"
    - service: script.cleanup_text
      data:
        message: >
          {{ jarvis_morning }}
      response_variable: "cleaned_jarvis_morning"
    - variables:
        greetings: >
          {"general":"{{general}}",
          "announcement":"{{cleaned_annc_greeting.text}}",
          "jarvis_morning":"{{cleaned_jarvis_morning.text}}",
          "jarvis_welcome":"{{jarvis_welcome}}",
          "jeff":"{{jeff}}",
          "kat":"{{kat}}",
          "skylar":"{{skylar}}",
          "alert":"{{alert}}",
          "event":"{{event}}",
          "weather_warning":"{{weather_warning}}"}
    - stop: "ok, Im done."
      response_variable: "greetings"

  get_weather_info:
    sequence:
    - variables:
        current_temp: >
          {{states('sensor.back_porch_ecowitt_wh53_75_f')|round}}
        current_humidity: >
          {{ states('sensor.acurite_5n1_865_h') | round }}
        
        current_conditions: >
          {{ [
            "with ",
            "and ",
            ] | random }}
          {%- if is_state('binary_sensor.lightning_detected','on') and is_state_attr('binary_sensor.rain_possible','raining_now','No') %}  
            Thunder in the area.
          {% elif is_state('binary_sensor.lightning_detected','on') and is_state_attr('binary_sensor.rain_possible','raining_now','Yes') %}  
            a thunderstorm.
          {% elif is_state('binary_sensor.lightning_detected','off') and is_state_attr('binary_sensor.rain_possible','raining_now','Yes') %}  
            {{ [
            'rain.', 
            'showers.'
            ] | random }}
          {% elif is_state('sensor.pirate_weather_hourly', 'rainy') and is_state_attr('binary_sensor.rain_possible','raining_now','No') %}
            {{ [
            'possible rain.', 
            'possible showers.',
            'a chance of rain.'
            ] | random }}
          {% elif is_state('sensor.pirate_weather_hourly', 'cloudy') %}
            {{ [
            'clouds.', 
            'cloudy skies.'
            ] | random }}
          {% elif is_state('sensor.pirate_weather_hourly', 'partlycloudy') %}
            {{ [
            'some clouds.', 
            'partly cloudy skies.',
            'scattered clouds.'
            ] | random }}
          {% elif is_state('sensor.pirate_weather_hourly', 'sunny') %}
            {% if is_state('sun.sun', 'above_horizon') %}
              {{ [
              'sunny.', 
              'sun.'
              ] | random }}
            {% else %}
              {{ [
              'clear.', 
              'clear skies.'
              ] | random }}
            {% endif %}
          {% else %}
            {% if is_state('sensor.pirate_weather_hourly', 'clear-night') %}
              {{ [
              'clear.', 
              'clear skies.'
              ] | random }}
            {% else %}
              and {{ states('sensor.pirate_weather_hourly') }}
            {% endif %}
          {% endif %}
    - service: script.cleanup_text
      data:
        message: >
          {{ states('sensor.clothing_forecast_detail') }}
      response_variable: "cleaned_cforecast"
    - service: script.cleanup_text
      data:
        message: >
          {{ states('sensor.sun_status') }}
      response_variable: "cleaned_sun_status"
    - service: script.cleanup_text
      data:
        message: >
          {{ states('sensor.current_conditions_detail') }}
      response_variable: "cleaned_current_conditions_detailed"
    - variables:
        clothing_forecast: >
          {{ cleaned_cforecast.text }}
        current_alerts: >
          {% if states('sensor.fayette_active_alerts') | int > 0 %}
            There are currently {{ states('sensor.fayette_active_alerts') }} active weather alerts for our area.
          {% else %}
            
          {% endif %}
        weather: >
          {"current_alerts":"{{current_alerts}}",
          "clothing_forecast":"{{clothing_forecast}}",
          "current_conditions_detail":"{{cleaned_current_conditions_detailed.text}}",
          "sun_status":"{{cleaned_sun_status.text}}"}
    - stop: "Alright. Im done."
      response_variable: "weather" 

  jarvis_assist_response:
    sequence:
      - variables:
          response: >
            {{ response }}
          room: >
            {{ state_attr('binary_sensor.jarvis','last_jarvis') }}
      - service: script.get_room_audio
        data:
          room: >
            {{ room }}
        response_variable: "room_audio"
      - service: media_player.play_media
        data:
          entity_id: >
            {{ room_audio.audio_speaker | string }}
          media_content_id: >
            {{ response }}
          media_content_type: music
          announce: "true"

  # speech_engine:
  #   sequence:
  #   - service: script.get_tts_greetings
  #     response_variable: "greetings"
  #   - variables:
  #       type: >
  #         {% if type is defined and type != 'none' %}
  #           {{ type }}
  #         {% else %}
  #           normal
  #         {% endif %}
  #       summary: >-
  #         {% if msg_summary %}
  #           {{ msg_summary }}
  #         {% else %}
  #           none
  #         {% endif %}
  #       room: >
  #         {% if who is defined %}
  #           {{ who }}
  #         {% elif room is defined %}
  #           {{ room }}
  #         {% else %}
  #           NA
  #         {% endif %}
  #       greeting: >
  #         {% if room == 'jeff' %}
  #           {{ greetings.jeff }}
  #         {% elif room == 'kat' %}
  #           {{ greetings.kat }}
  #         {% elif room == 'skylar' %}
  #           {{ greetings.skylar }}
  #         {% elif type == 'weather_alert' %}
  #           {{ greetings.weather_warning }}
  #         {% elif type == 'alert' %}
  #           {{ greetings.alert }}
  #         {% else %}
            
  #         {% endif %}
  #       briefing_greeting: >
  #         {% if type == 'briefing' %}
  #           {{ greetings.general }}
  #         {% else %}
          
  #         {% endif %}

  #   - service: script.get_room_audio
  #     data:
  #       room: >
  #         {{room}}
  #       type: >
  #         {{type}}
  #     response_variable: room_services
  #   - service: script.cleanup_text
  #     data:
  #       message: >
  #         {{ briefing }}
  #         {{ greeting }}
  #         {{ message }}
  #     response_variable: cleaned_message
  #   - service: mqtt.publish
  #     data_template:
  #       topic: house/polly/lastmsg
  #       payload: >
  #         {% if summary == 'none' %}
  #           {{ cleaned_message.text | string }}
  #         {% else %}
  #           {{ summary }}
  #         {% endif %}
  #       retain: true
  #   - service: mqtt.publish
  #     data_template:
  #       topic: house/polly/msgtime
  #       payload: '{{ now().strftime("%-I") }}:{{ now().strftime("%M") }} {{ now().strftime("%p")
  #         }} '
  #       retain: true
  #   - service: mqtt.publish
  #     data_template:
  #       topic: house/polly/lastloc
  #       payload: '{{ room_services.area | string }}'
  #       retain: true
  #   - service: mqtt.publish
  #     data_template:
  #       topic: house/polly/verbal
  #       payload: >
  #         {{ room_services.area != 'none'}}
  #       retain: true
  #   - service: mqtt.publish
  #     data_template:
  #       topic: house/polly/timestamp
  #       payload: >
  #         {{ as_timestamp(now()) }}
  #       retain: true
  #   - service: mqtt.publish
  #     data_template:
  #       topic: house/jarvis/event
  #       payload: >
  #         {"destination":"{{ room_services.area | string }}",
  #         "message":"{{ cleaned_message.text | string }}",
  #         "verbal":"{{ room_services.area != 'none'}}",
  #         "speaker":"{{ room_services.jarvis_speaker | string }}",
  #         "tts":"{{ room_services.jarvis_tts | string }}",
  #         "type":"{{type | string}}",
  #         "last_event":{{as_timestamp(now())}}}
  #       retain: true
        
  #   - condition: state
  #     entity_id: binary_sensor.family_home
  #     state: 'on'
  #   - condition: state
  #     entity_id: input_boolean.vacation_mode
  #     state: 'off'
  #   - service: script.get_notification_sound
  #     data:
  #       type: >
  #         {{type}}
  #     response_variable: notifications
  #   - choose:
  #       - conditions:
  #           - condition: template
  #             value_template: "{{ type | string in ['alarm','tornado','important_msg'] }}"
  #         sequence:
  #           - service: media_player.volume_set
  #             data:
  #               entity_id: '{{ room_services.jarvis_speaker | string }}'
  #               volume_level: >
  #                 {{ states('input_number.tts_high_volume') | float }}
  #           - service: notify.alexa_media
  #             data:
  #               message: >
  #                 <voice name="{{ states('input_select.jarvis_alert_voice') }}">
  #                 <amazon:auto-breaths volume="loud" frequency="high">  
  #                 {{ notifications.chime }}
  #                 <break time="2s"/>
  #                 {{ cleaned_message.text }}
  #                 </amazon:auto-breaths>
  #                 </voice>
  #               target: '{{ room_services.jarvis_speaker | string }}'
  #               data:
  #                 type: tts
  
  #           # - if:
  #           #   - condition: template
  #           #     value_template: "{{ type in ['tornado','important_msg'] }}"
  #           #   then:
  #           #   - service: script.echo_notification_sound
  #           #     data:
  #           #       room: >
  #           #         media_player.all_rooms
  #           #       type: >
  #           #         {{type}}
  #           #   - delay:
  #           #       seconds: 5
  #           # - service: media_player.volume_set
  #           #   data:
  #           #     entity_id: media_player.room_audio
  #           #     volume_level: >
  #           #       {{ states('input_number.tts_high_volume') | float }}
  #           # - service: tts.cloud_say
  #           #   data:
  #           #     cache: true
  #           #     language: en-IE
  #           #     entity_id: media_player.room_audio
  #           #     options:
  #           #       voice: EmilyNeural
  #           #     message: >
  #           #       {{ cleaned_message.text }}
  #           - delay:
  #               seconds: 20
  #           - service: media_player.volume_set
  #             data:
  #               entity_id: media_player.room_audio
  #               volume_level: "{{ states('input_number.tts_volume') | float }}"
  #       - conditions:
  #           - condition: template
  #             value_template: "{{ type | string in ['weather_alert','weather_advisory','weather_cleared'] }}"
  #           - condition: state
  #             entity_id: input_boolean.audible_notifications
  #             state: 'on'
  #         sequence:
  #           - service: media_player.volume_set
  #             data:
  #               entity_id: '{{ room_services.jarvis_speaker | string }}'
  #               volume_level: >
  #                 {{ states('input_number.tts_volume') | float }}
  #           - service: notify.alexa_media
  #             data:
  #               message: >
  #                 <voice name="{{ states('input_select.jarvis_alert_voice') }}">
  #                 <amazon:auto-breaths volume="loud" frequency="high">  
  #                 {{ notifications.chime }}
  #                 <break time="2s"/>
  #                 {{ cleaned_message.text }}
  #                 </amazon:auto-breaths>
  #                 </voice>
  #               target: '{{ room_services.jarvis_speaker | string }}'
  #               data:
  #                 type: tts
  #           # - service: script.echo_notification_sound
  #           #   data:
  #           #     room: >
  #           #       {{ room_services.audio_speaker | string }}
  #           #     type: >
  #           #       {{type}}
  #           # - delay:
  #           #     seconds: 5
  #           # - service: media_player.volume_set
  #           #   data:
  #           #     entity_id: media_player.room_audio
  #           #     volume_level: >
  #           #       {{ states('input_number.tts_volume') | float }}
  #           # - service: tts.cloud_say
  #           #   data:
  #           #     cache: true
  #           #     language: en-IE
  #           #     entity_id: media_player.room_audio
  #           #     options:
  #           #       voice: EmilyNeural
  #           #     message: >
  #           #       {{ cleaned_message.text }}
  #       - conditions:
  #           - condition: state
  #             entity_id: input_boolean.audible_notifications
  #             state: 'on'
  #           - condition: template
  #             value_template: "{{ room_services.jarvis_speaker | string != 'none' }}"
  #         sequence:
  #           # - if:
  #           #   - condition: template
  #           #     value_template: "{{ type in ['goodnight'] }}"
  #           #   then:
  #           #     - service: script.echo_notification_sound
  #           #       data:
  #           #         room: >
  #           #           {{ room_services.audio_speaker | string }}
  #           #         type: >
  #           #           goodnight
  #           #     - delay:
  #           #         seconds: 8
  #           #   else:
  #           #     - service: script.echo_notification_sound
  #           #       data:
  #           #         room: >
  #           #           {{ room_services.audio_speaker | string }}
  #           #         type: >
  #           #           {{type}}
  #           #     - delay:
  #           #         seconds: 5
  #           # - service: media_player.volume_set
  #           #   data:
  #           #     entity_id: '{{ room_services.jarvis_speaker | string }}'
  #           #     volume_level: >
  #           #       {{ states('input_number.tts_volume') | float }}
  #           # - service: tts.cloud_say
  #           #   data:
  #           #     #cache: true
  #           #     language: en-GB
  #           #     entity_id: >
  #           #       {{ room_services.jarvis_speaker | string }}
  #           #     options:
  #           #       voice: ThomasNeural
  #           #     message: >
  #           #       {{ cleaned_message.text }}
  #           - if:
  #             - condition: template
  #               value_template: "{{ type in ['goodnight'] }}"
  #             then:
  #             - service: script.notification_sound
  #               data:
  #                 room: >
  #                   {{room}}
  #                 type: >
  #                   {{type}}
  #             - delay:
  #                 seconds: 7 
  #           - service: media_player.volume_set
  #             data:
  #               entity_id: '{{ room_services.jarvis_speaker | string }}'
  #               volume_level: >
  #                 {{ states('input_number.tts_volume') | float }}
  #           - service: notify.alexa_media
  #             data:
  #               message: >
  #                 <voice name="{{ states('input_select.polly_voice') }}">
  #                 <amazon:auto-breaths volume="loud" frequency="high">
  #                 {% if is_state('input_select.polly_voice', 'Brian') %}
  #                   <prosody rate="fast">
  #                 {% endif %}
  #                 {{ notifications.chime }}
  #                 <break time="2s"/>
  #                 {{ cleaned_message.text }}
  #                 {% if is_state('input_select.polly_voice', 'Brian') %}
  #                   </prosody>
  #                 {% endif %}
  #                 </amazon:auto-breaths>
  #                 </voice>
  #               target: '{{ room_services.jarvis_speaker | string }}'
  #               data:
  #                 type: tts
  #     default: 
  #     - service: persistent_notification.dismiss
  #       data:
  #         notification_id: "house_notification"
  #     - service: persistent_notification.create 
  #       data:
  #         notification_id: "house_notification"
  #         message: "{{ message }}"
  #         title: "From Jarvis"

  speech_engine:
    sequence:
    - service: script.get_tts_greetings
      response_variable: "greetings"
    - variables:
        type: >
          {% if type is defined and type != 'none' %}
            {{ type }}
          {% else %}
            normal
          {% endif %}
        summary: >-
          {% if msg_summary %}
            {{ msg_summary }}
          {% else %}
            none
          {% endif %}
        room: >
          {% if who is defined %}
            {{ who }}
          {% elif room is defined %}
            {{ room }}
          {% else %}
            NA
          {% endif %}
        greeting: >
          {% if room == 'jeff' %}
            {{ greetings.jeff }}
          {% elif room == 'kat' %}
            {{ greetings.kat }}
          {% elif room == 'skylar' %}
            {{ greetings.skylar }}
          {% elif type == 'weather_alert' %}
            {{ greetings.weather_warning }}
          {% elif type == 'alert' %}
            {{ greetings.alert }}
          {% else %}
            
          {% endif %}
        briefing_greeting: >
          {% if type == 'briefing' %}
            {{ greetings.general }}
          {% else %}
          
          {% endif %}

    - service: script.get_room_audio
      data:
        room: >
          {{room}}
        type: >
          {{type}}
      response_variable: room_services
    - service: script.cleanup_text
      data:
        message: >
          {{ briefing }}
          {{ greeting }}
          {{ message }}
      response_variable: cleaned_message
    - service: mqtt.publish
      data_template:
        topic: house/polly/lastmsg
        payload: >
          {% if summary == 'none' %}
            {{ cleaned_message.text | string }}
          {% else %}
            {{ summary }}
          {% endif %}
        retain: true
    - service: mqtt.publish
      data_template:
        topic: house/polly/msgtime
        payload: '{{ now().strftime("%-I") }}:{{ now().strftime("%M") }} {{ now().strftime("%p")
          }} '
        retain: true
    - service: mqtt.publish
      data_template:
        topic: house/polly/lastloc
        payload: '{{ room_services.area | string }}'
        retain: true
    - service: mqtt.publish
      data_template:
        topic: house/polly/verbal
        payload: >
          {{ room_services.area != 'none'}}
        retain: true
    - service: mqtt.publish
      data_template:
        topic: house/polly/timestamp
        payload: >
          {{ as_timestamp(now()) }}
        retain: true
    - service: mqtt.publish
      data_template:
        topic: house/jarvis/event
        payload: >
          {"destination":"{{ room_services.area | string }}",
          "message":"{{ cleaned_message.text | string }}",
          "verbal":"{{ room_services.area != 'none'}}",
          "speaker":"{{ room_services.jarvis_speaker | string }}",
          "tts":"{{ room_services.jarvis_tts | string }}",
          "type":"{{type | string}}",
          "last_event":{{as_timestamp(now())}}}
        retain: true
        
    - condition: state
      entity_id: binary_sensor.family_home
      state: 'on'
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ type | string in ['alarm','tornado','important_msg'] }}"
          sequence:
            - if:
              - condition: template
                value_template: "{{ type in ['tornado','important_msg'] }}"
              then:
              - if:
                - condition: template
                  value_template: "{{ type not in ['normal'] }}"
                then:
                - service: script.notification_sound
                  data:
                    room: room_audio
                    type: >
                      {{type}}
                - delay:
                    seconds: 5
            - service: media_player.volume_set
              data:
                entity_id: media_player.room_audio_vol
                volume_level: >
                  {{ states('input_number.tts_high_volume') | float }}
            - service: tts.cloud_say
              data:
                cache: true
                language: en-IE
                entity_id: media_player.room_audio
                options:
                  voice: EmilyNeural
                message: >
                  {{ cleaned_message.text }}
            - delay:
                seconds: 20
            - service: media_player.volume_set
              data:
                entity_id: media_player.room_audio_vol
                volume_level: "{{ states('input_number.tts_volume') | float }}"
        - conditions:
            - condition: template
              value_template: "{{ type | string in ['weather_alert','weather_advisory','weather_cleared'] }}"
            - condition: state
              entity_id: input_boolean.audible_notifications
              state: 'on'
          sequence:
            - if:
              - condition: template
                value_template: "{{ type not in ['normal'] }}"
              then:
              - service: script.notification_sound
                data:
                  room: room_audio
                  type: >
                    {{type}}
              - delay:
                  seconds: 5
            - service: media_player.volume_set
              data:
                entity_id: media_player.room_audio_vol
                volume_level: >
                  {{ states('input_number.tts_volume') | float }}
            - service: tts.cloud_say
              data:
                cache: true
                language: en-IE
                entity_id: media_player.room_audio
                options:
                  voice: EmilyNeural
                message: >
                  {{ cleaned_message.text }}
        - conditions:
            - condition: state
              entity_id: input_boolean.audible_notifications
              state: 'on'
            - condition: template
              value_template: "{{ room_services.audio_speaker | string != 'none' }}"
          sequence:
            - if:
              - condition: template
                value_template: "{{ type in ['goodnight'] }}"
              then:
                - if:
                  - condition: template
                    value_template: "{{ room not in ['NA'] }}"
                  then:
                  - service: script.notification_sound
                    data:
                      room: >
                        {{ room_services.audio_speaker | string }}
                      type: >
                        goodnight
                  - delay:
                      seconds: 60
              else:
                - if:
                  - condition: template
                    value_template: "{{ room not in ['NA'] and type not in ['normal'] }}"
                  then:
                  - service: script.notification_sound
                    data:
                      room: >
                        {{ room_services.audio_speaker | string }}
                      type: >
                        {{ type }}
                  - delay:
                      seconds: 5
            - service: media_player.volume_set
              data:
                entity_id: '{{ room_services.audio_speaker | string }}'
                volume_level: >
                  {{ states('input_number.tts_volume') | float }}
            - service: tts.cloud_say
              data:
                language: en-GB
                entity_id: >
                  {{ room_services.audio_speaker | string }}
                options:
                  voice: RyanNeural
                message: >
                  {{ cleaned_message.text }}
      default: 
      - service: persistent_notification.dismiss
        data:
          notification_id: "house_notification"
      - service: persistent_notification.create 
        data:
          notification_id: "house_notification"
          message: "{{ message }}"
          title: "From Jarvis"

  

  jarvis_alert:
    fields:
      rooms:
        selector:
          text:
        name: rooms
        description: Room where to Send Audio
        required: true
      message:
        selector:
          text:
        name: message
        description: Contents
        required: true
    sequence:
    - service: media_player.volume_set
      data:
        entity_id: >-
          {{ rooms | string }}
        volume_level: >
          {{ states('input_number.tts_high_volume') | float }}
    - service: notify.alexa_media
      data:
        message: >
          <voice name="{{ states('input_select.polly_voice') }}">
          <amazon:auto-breaths>
          <prosody rate="fast">
            {{ message }}
          </prosody>
          </amazon:auto-breaths>
          </voice>
        target: >
          {{ rooms | string }}
        data:
          type: tts
    - delay:
        seconds: 20
    - service: media_player.volume_set
      data:
        entity_id: >-
          {{ rooms | string }} 
        volume_level: "{{ states('input_number.tts_volume') | float }}"
    
  jarvis_normal:
    fields:
      rooms:
        selector:
          text:
        name: rooms
        description: Room where to Send Audio
        required: true
      tts:
        selector:
          text:
        name: tts
        description: TTS Service
        required: true
      message:
        selector:
          text:
        name: message
        description: Contents
        required: true
    sequence:
    - condition: template
      value_template: "{{ rooms | string != 'none' }}"
    - condition: template
      value_template: "{{ is_state('input_boolean.audible_notifications','on') }}"
      
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ tts | string == 'amp' }}"
          sequence:
            - service: notify.alexa_media
              data:
                message: >
                  <voice name="{{ states('input_select.polly_voice') }}">
                  <amazon:auto-breaths>
                  <prosody rate="fast">
                  {{ cleaned_message.text }}
                  </prosody>
                  </amazon:auto-breaths>
                  </voice>
                target: >
                  {{ room_services.jarvis_speaker | string }}
                data:
                  type: tts
        - conditions:
            - condition: template
              value_template: "{{ tts | string == 'polly' }}"
          sequence:
          - service: media_player.volume_set
            data:
              entity_id: '{{ rooms | string }}'
              volume_level: >
                {{ states('input_number.tts_volume') | float }}
          - service: tts.amazon_polly_say
            data:
              entity_id: '{{ rooms | string }}'
              message: >
                <speak>
                  <break time="1s"/>
                  <amazon:auto-breaths>
                  <prosody rate="fast">
                  {{ message }}
                  <prosody>
                  </amazon:auto-breaths>
                </speak>
              cache: true


  jarvis_voice:
    sequence:
    - if:
      - condition: template
        value_template: "{{ who in ['exercise_room'] }}"
      then:
      - service: media_player.volume_set
        data:
          entity_id: >
              media_player.studio_speaker
          volume_level: "{{ states('input_number.tts_high_volume') | float }}"
      - service: tts.amazon_polly_say
        data_template:
          entity_id: >
              media_player.studio_speaker
          message: >
            <speak>
              <break time="1s"/>
              <prosody rate="fast">
              {{ message }}
              </prosody>
            </speak>
      - delay:
          seconds: 20
      - service: media_player.volume_set
        data:
          entity_id: >
              media_player.studio_speaker
          volume_level: "{{ states('input_number.tts_volume') | float }}"
      else:
      - service: media_player.volume_set
        data:
          entity_id: >
            {% if who in ['kitchen_echo','media_player.kitchen_echo','kitchen']%} 
              media_player.living_room_echo
            {% elif who in ['skylar_bedroom','media_player.skylars_room','skylars_bedroom','skylars_echo','skylars_room'] %}
              media_player.skylars_room
            {% elif who in ['master_bedroom','media_player.master_bedroom_echo', 'master_bedroom_echo'] %}
              media_player.master_bedroom_echo
            {% elif who in ['livingroom_echo','media_player.living_room_echo','living_room','main'] %} 
              media_player.living_room_echo
            {% elif who in ['studio', 'media_player.dads_desk']%}
              media_player.slacker_labs_echo
            {% elif who in ['basement', 'media_player.basement_echo']%}
              media_player.basement_echo
            {% elif who in ['theater', 'media_player.theater']%}
              media_player.theater_echo
            {% else %}
              media_player.living_room_echo
            {% endif %}
          volume_level: "{{ states('input_number.tts_volume') | float }}"
      - service: notify.alexa_media
        data:
          message: >
            <voice name="{{ states('input_select.polly_voice') }}">
            <amazon:auto-breaths>
            <prosody rate="fast">
            {{ message }}
            </prosody>
            </amazon:auto-breaths>
            </voice>
          target: > 
            {% if who in ['kitchen_echo','media_player.kitchen_echo','kitchen']%} 
              media_player.living_room_echo
            {% elif who in ['skylar_bedroom','media_player.skylars_room','skylars_bedroom','skylars_echo','skylars_room'] %}
              media_player.skylars_room
            {% elif who in ['master_bedroom','media_player.master_bedroom_echo', 'master_bedroom_echo'] %}
              media_player.master_bedroom_echo
            {% elif who in ['livingroom_echo','media_player.living_room_echo','living_room','main'] %} 
              media_player.living_room_echo
            {% elif who in ['studio', 'media_player.dads_desk']%}
              media_player.slacker_labs_echo
            {% elif who in ['basement', 'media_player.basement_echo']%}
              media_player.basement_echo
            {% elif who in ['theater', 'media_player.theater']%}
              media_player.theater_echo
            {% else %}
              media_player.living_room_echo
            {% endif %}
          data:
            type: tts

  announcement:
    sequence:
    - variables: 
        type: >
          {% if type is defined %}
            {{ type }}
          {% else %}
            normal
          {% endif %}
        room: > 
          {% if who is defined %}
            {{ who }}
          {% else %}
            NA
          {% endif %}
    - service: script.speech_engine
      data:
        who: >
          {{ room }}
        message: >
          {{ message }}
    


  briefing:
    sequence:
    - service: script.speech_engine
      data:
        who: '{{ who }}'
        message:  >-
            {% if now().strftime('%H')|int < 12%}
             Good morning.
            {% elif now().strftime('%H')|int >= 12 and now().strftime('%H')|int < 17 %}
              Good afternoon.
            {% else %}
              Good evening.
            {% endif %}
            {% if states('sensor.kat_room') == who and states('sensor.jeff_room') == who  %}
              everyone.
            {% elif states('sensor.kat_room') == who  %}
              Ma'am.
            {% elif states('sensor.jeff_room') == who  %}
              Sir.
            {% else %}
              
            {% endif %}
            {{ message }}
  # jarvis_already_done:
  #   sequence:
  #   - service: script.speech_engine
  #     data:
  #       who: "{{ states('sensor.room_audio') }}"
  #       message:  >-
  #         {{ [
  #         'I have already handled that.', 
  #         'Looks like someone already did that, but I will gladly take credit.',
  #         'I am so fast it is already done.'
  #         ]| random }}
  # jarvis_response:
  #   sequence:
  #   - service: script.speech_engine
  #     data:
  #       who: "{{ states('sensor.room_audio') }}"
  #       message:  >-
  #         {{ [
  #         'Okay.', 
  #         'If you insist.',
  #         'I am afraid I can not do that, I am kidding,',
  #         'Leave it to me.',
  #         'As you wish.',
  #         'I am on it.',
  #         'No Problem.',
  #         'I think I can handle that.',
  #         'Working on it now.',
  #         '.Oh, you were talking to me. Let me take care of that.'
  #         'Why not. It is not like I ever sleep.',
  #         'I am not even supposed to be here today. But whatever.',
  #         'You did not say the magic word.  ,Oh forget it. I will take care of it.',
  #         'Funny, I was just about to do that.',
  #         'There are still terabytes of calculations required before I can. ,Oh, whatever.'
  #         ] | random }}
  # house_party_protocol_on:
  #   sequence:
  #     - delay: 00:00:05
  #     - service: homeassistant.turn_on
  #       entity_id: group.incense
  #     - service: script.status_annc
  #       data_template:
  #         who: "{{ states('sensor.room_audio') }}"
  #         call_house_party_protocol_enabled: 1

  # house_party_protocol_off:
  #   sequence:
  #     - delay: 00:00:05
  #     - service: homeassistant.turn_off
  #       entity_id: group.incense
  #     - service: script.status_annc
  #       data_template:
  #         who: "{{ states('sensor.room_audio') }}"
  #         call_house_party_protocol_disabled: 1

  # alexa_interjection:
  #   sequence:
  #     - service: script.status_annc
  #       data:
  #         who: "{{ states('sensor.last_alexa')}}"
  #         call_confirmation: 1

  # google_interjection:
  #   sequence:
  #     - service: script.status_annc
  #       data:
  #         who: "{{ states('sensor.room_audio') }}"
  #         call_confirmation: 1

  # jarvis_said_what:
  #   sequence:
  #     - service: script.speech_engine
  #       data:
  #         message: >
  #           {{ states('sensor.lastmsg') }}

  # test_jarvis_proactive:
  #   sequence:
  #     - service: script.activate_alexa_actionable_notification
  #       data:
  #         text: "Boss, It appears you are working. Would you like me to turn on your desk lights?"
  #         event_id: "actionable_notification_wfh_lights"
  #         alexa_device: "media_player.dads_desk"

  # activate_alexa_actionable_notification:
  #   sequence:
  #     - service: input_text.set_value
  #       data:
  #         entity_id: input_text.alexa_actionable_notification
  #         value: '{"text": "{{ text }}", "event": "{{ event_id }}"}'
  #     - service: media_player.play_media
  #       data:
  #         entity_id: "{{ alexa_device }}"
  #         media_content_type: skill
  #         media_content_id: amzn1.ask.skill.12146900-4aab-43d0-84b7-fe6df3bbe8df
  marauders_map_opens:
    sequence:
    - service: script.speech_engine
      data:
        room: pot_studio
        type: priority
        message: >
          {{ [
              "What are you doing wandering the corridors at night?, ",
              "Out for a little walk in the moonlight, are we?, ",
              "I am pretty sure you won't find Peter Pettigrew.",
              "Training for the ballet, Potter? ",
              "A wise man once said, Happiness can be found, even in the darkest of times, if one only remembers to turn on the light.",
              "Nothing like a night time stroll to give you ideas. ",
              "You ought to be careful. People will think youâreâ¦ up to something. "
              ] | random }}
          {{ [
              "Oh well.",
              "Guess we might as well get to it then. ",
              "Right. ",
              "So that is what I did. "
              ] | random }}
          {{ [
              "I have disabled the light timer.",
              "I have configured the studio for light. ",
              "The lights are now on indefinately. "
              ] | random }}
  marauders_map_closes:
    sequence:
    - service: script.speech_engine
      data:
        room: pot_studio
        type: priority
        message: >
          {{ [
            "I have enabled the light timer. ",
            "Wait. Was that Peter Pettigrew? Couldn't been. He is dead. ",
            "Mischief Managed indeed. ",
            "Yer a wizard. ",
            "I hope you're pleased with yourself. We could all have been killed. Or worse, expelled. ",
            ] | random }}
          {{ [
            "Guess thats it then. Lights out in 20 minutes. ",
            "Anyway, I will get the lights. ",
            "The clock is ticking. ",
            "I will turn off the lights in about twenty minutes. "
            ] | random }}
          {{ [
            "Watch out for Snape. ",
            "Better scurry back to your house common room.",
            "That should give you enough time to get back to your room."
            ] | random }}
# automation:
#   - id: d34f931d-eb55-4495-8eb1-7defbe9f7238
#     alias: WFH Lights - Jarvis
#     trigger:
#       - platform: template
#         value_template: >
#           {{ states('sensor.jeff_room') in ['master_bedroom'] }}
#         id: presence_detected
#         for: "00:06:00"
#       - platform: template
#         value_template: >
#           {{ states('sensor.jeff_room') in ['master_bedroom'] }}
#         id: presence_detected_later
#         for: "00:10:00"
#       - platform: template
#         value_template: >
#           {{ states('sensor.jeff_room') not in ['master_bedroom'] }}
#         id: presence_gone
#         for: "01:00:00"
#       - platform: event
#         event_type: alexa_actionable_notification
#         event_data:
#           event_id: actionable_notification_wfh_lights
#           event_response_type: ResponseYes
#         id: response
#     action:
#       - choose:
#           - conditions:
#               - condition: trigger
#                 id: presence_detected_later
#               - condition: time
#                 after: "08:00:00"
#                 before: "17:00:00"
#                 weekday:
#                   - mon
#                   - tue
#                   - wed
#                   - thu
#                   - fri
#               - condition: state
#                 entity_id: switch.dazzned50
#                 state: "off"
#               - condition: state
#                 entity_id: binary_sensor.workday_sensor
#                 state: "on"
#             sequence:
#               - service: script.speech_engine
#                 data_template:
#                   who: master_bedroom
#                   message: >
#                     {{ [
#                         'It appears you are working. ',
#                         'Back working again I see. ',
#                         'You appear to be up, so '
#                         'Are we working on a secret project? '
#                         ] | random }}
#                     {{ [
#                         'I took the liberty to turn on your desk lights.',
#                         'Some extra light will help reduce eye strain.',
#                         'I activated your desk lights.'
#                         ] | random }}
#               - service: scene.turn_on
#                 entity_id: scene.studio_work
#           - conditions:
#               - condition: trigger
#                 id: presence_detected
#               - condition: time
#                 after: "08:00:00"
#                 before: "17:00:00"
#                 weekday:
#                   - mon
#                   - tue
#                   - wed
#                   - thu
#                   - fri
#               - condition: state
#                 entity_id: switch.dazzned50
#                 state: "off"
#               - condition: state
#                 entity_id: binary_sensor.workday_sensor
#                 state: "on"
#             sequence:
#               - service: script.activate_alexa_actionable_notification
#                 data:
#                   text: "Boss, It appears you are working. Would you like me to turn on your desk lights?"
#                   event_id: "actionable_notification_wfh_lights"
#                   alexa_device: "media_player.dads_desk"
#           - conditions:
#               - condition: trigger
#                 id: response
#             sequence:
#               - service: script.speech_engine
#                 data:
#                   who: master_bedroom
#                   message: "Thats why I am here. Activating your work from home scene."
#               - service: scene.turn_on
#                 entity_id: scene.studio_work
#           - conditions:
#               - condition: trigger
#                 id: presence_gone
#             sequence:
#               - service: scene.turn_on
#                 entity_id: scene.studio_off
#         default: []
  # - id: 534f3577-319b-4a2d-8900-a34393a7ab03
  #   alias: WFH Lights
  #   trigger:
  #     - platform: state
  #       entity_id: binary_sensor.master_bedroom_motion_occupancy
  #       to: 'on'
  #       from: 'off'
  #       id: presence_detected
  #     - platform: template
  #       value_template: >
  #         {{ states('sensor.jeffs_iphone_11') == 'master_bedroom' or states('sensor.jeffs_watch') == 'master_bedroom' }}
  #     - platform: event
  #       event_type: alexa_actionable_notification
  #       event_data:
  #         event_id: actionable_notification_wfh_lights
  #         event_response_type: ResponseYes
  #       id: response
  #   action:
  #     - choose:
  #         - conditions:
  #             - condition: trigger
  #               id: presence_detected
  #             - condition: time
  #               after: "08:00:00"
  #               before: "17:00:00"
  #               weekday:
  #                 - mon
  #                 - tue
  #                 - wed
  #                 - thu
  #                 - fri
  #             - condition: state
  #               entity_id: switch.dazzned50
  #               state: 'off'
  #             - condition: state
  #               entity_id: binary_sensor.workday_sensor
  #               state: 'on'
  #           sequence:
  #             - service: script.activate_alexa_actionable_notification
  #               data:
  #                 text: 'Boss, It appears you are working. Would you like me to turn on your desk lights?'
  #                 event_id: 'actionable_notification_wfh_lights'
  #                 alexa_device: 'media_player.dads_desk'
  #         - conditions:
  #             - condition: trigger
  #               id: response
  #           sequence:
  #             - service: script.speech_engine
  #               data:
  #                 who: 'master_bedroom'
  #                 message: >
  #                   Activating your work from home scene.
  #             - service: scene.turn_on
  #               entity_id: scene.studio_work
  #       default: []

